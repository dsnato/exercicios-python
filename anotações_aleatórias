def digital_root(n):
    """
    Função que reduz um número à soma de seus dígitos repetidamente
    até que o resultado seja um número de um dígito.
    """
    while n >= 10:
        n = sum(int(d) for d in str(n))
    return n


def process_block(block):
    """
    Processa um bloco (string) de 7 dígitos:
    1. Soma cumulativamente os dígitos (nesse caso, é equivalente à soma total).
    2. Reduz o resultado à sua raiz digital.

    Exemplo para o bloco '1234567':
      - Soma: 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28
      - Reduzindo: 2 + 8 = 10 e depois 1 + 0 = 1
      - Resultado final: 1
    """
    # Soma dos dígitos do bloco
    total = sum(int(d) for d in block)
    # Reduz a soma para um dígito (raiz digital)
    return digital_root(total)


def process_pi_digits(pi_str, block_size=7):
    """
    Divide a string dos dígitos de pi em blocos de tamanho 'block_size'
    e aplica a função process_block para cada grupo.
    """
    results = []
    # Processa a string em blocos de 'block_size'
    for i in range(0, len(pi_str), block_size):
        block = pi_str[i:i + block_size]
        # Verifica se o bloco possui o tamanho completo (7 dígitos)
        if len(block) == block_size:
            result = process_block(block)
            results.append(result)
    return results


# Exemplo de dígitos de pi (sem o ponto decimal)
pi_digits = "3141592653589793238462643383279502884197169399375105820974944592"

# Vamos definir o comprimento total de interesse como 7 blocos de 7 dígitos (49 dígitos)
num_blocks = 7
length = num_blocks * 7
pi_digits_subset = pi_digits[:length]

# Processa os blocos de dígitos
results = process_pi_digits(pi_digits_subset, block_size=7)

print("Blocos processados e seus resultados (raiz digital final):")
for i, res in enumerate(results, start=1):
    block = pi_digits_subset[(i - 1) * 7:i * 7]
    # Mostra o bloco, a soma total e a redução final
    total = sum(int(d) for d in block)
    print(f"Bloco {i}: {block} -> Soma = {total} -> Raiz digital = {res}")

